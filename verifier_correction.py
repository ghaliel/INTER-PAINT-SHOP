#!/usr/bin/env python
"""
Script de v√©rification finale pour la correction de l'erreur "list index out of range"
"""
import os
import sys
from pathlib import Path

def verifier_fichiers():
    """V√©rifie que tous les fichiers de correction sont pr√©sents"""
    
    print("üîç V√©rification des fichiers de correction")
    print("=" * 50)
    
    fichiers_requis = [
        "final_portable_fixed.py",
        "build_portable_fixed.py", 
        "build_portable_fixed.bat",
        "test_portable_fixed.py",
        "manage_portable_robust.py"
    ]
    
    tous_presents = True
    
    for fichier in fichiers_requis:
        if Path(fichier).exists():
            print(f"‚úÖ {fichier}")
        else:
            print(f"‚ùå {fichier} - MANQUANT")
            tous_presents = False
    
    return tous_presents

def verifier_script_corrige():
    """V√©rifie que le script corrig√© fonctionne"""
    
    print("\nüß™ Test du script corrig√©")
    print("=" * 30)
    
    try:
        # Importer le script corrig√©
        import final_portable_fixed
        print("‚úÖ Script corrig√© import√© avec succ√®s")
        
        # V√©rifier que les fonctions principales existent
        if hasattr(final_portable_fixed, 'main'):
            print("‚úÖ Fonction main() pr√©sente")
        else:
            print("‚ùå Fonction main() manquante")
            return False
            
        if hasattr(final_portable_fixed, 'safe_execute_django_command'):
            print("‚úÖ Fonction safe_execute_django_command() pr√©sente")
        else:
            print("‚ùå Fonction safe_execute_django_command() manquante")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {e}")
        return False

def verifier_build_script():
    """V√©rifie que le script de build fonctionne"""
    
    print("\nüî® Test du script de build")
    print("=" * 30)
    
    try:
        import build_portable_fixed
        print("‚úÖ Script de build import√© avec succ√®s")
        
        if hasattr(build_portable_fixed, 'create_portable_exe'):
            print("‚úÖ Fonction create_portable_exe() pr√©sente")
            return True
        else:
            print("‚ùå Fonction create_portable_exe() manquante")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {e}")
        return False

def verifier_dossier_dist():
    """V√©rifie le dossier de distribution"""
    
    print("\nüìÅ V√©rification du dossier de distribution")
    print("=" * 40)
    
    dist_dir = Path("dist_portable")
    
    if not dist_dir.exists():
        print("‚ùå Dossier dist_portable/ manquant")
        return False
    
    fichiers_dist = [
        "PaintShop_Portable.exe",
        "Lancer_PaintShop.bat", 
        "db.sqlite3",
        "README.txt"
    ]
    
    tous_presents = True
    
    for fichier in fichiers_dist:
        if (dist_dir / fichier).exists():
            print(f"‚úÖ {fichier}")
        else:
            print(f"‚ùå {fichier} - MANQUANT")
            tous_presents = False
    
    return tous_presents

def verifier_correction_erreur():
    """V√©rifie que la correction de l'erreur est en place"""
    
    print("\nüîß V√©rification de la correction d'erreur")
    print("=" * 40)
    
    try:
        # Lire le script corrig√©
        with open("final_portable_fixed.py", "r", encoding="utf-8") as f:
            contenu = f.read()
        
        # V√©rifier les √©l√©ments de correction
        corrections = [
            "safe_execute_django_command",
            "PaintShop_Portable.exe",
            "IndexError",
            "AttributeError",
            "hasattr(sys, 'argv')"
        ]
        
        toutes_presentes = True
        
        for correction in corrections:
            if correction in contenu:
                print(f"‚úÖ {correction} - Pr√©sent")
            else:
                print(f"‚ùå {correction} - MANQUANT")
                toutes_presentes = False
        
        return toutes_presentes
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False

def main():
    """Fonction principale de v√©rification"""
    
    print("üé® PaintShop - V√©rification de la correction")
    print("=" * 60)
    
    # V√©rifications
    fichiers_ok = verifier_fichiers()
    script_ok = verifier_script_corrige()
    build_ok = verifier_build_script()
    dist_ok = verifier_dossier_dist()
    correction_ok = verifier_correction_erreur()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE LA V√âRIFICATION")
    print("=" * 60)
    
    if fichiers_ok:
        print("‚úÖ Fichiers de correction: COMPLETS")
    else:
        print("‚ùå Fichiers de correction: INCOMPLETS")
    
    if script_ok:
        print("‚úÖ Script corrig√©: FONCTIONNEL")
    else:
        print("‚ùå Script corrig√©: D√âFAILLANT")
    
    if build_ok:
        print("‚úÖ Script de build: FONCTIONNEL")
    else:
        print("‚ùå Script de build: D√âFAILLANT")
    
    if dist_ok:
        print("‚úÖ Dossier de distribution: COMPLET")
    else:
        print("‚ùå Dossier de distribution: INCOMPLET")
    
    if correction_ok:
        print("‚úÖ Correction d'erreur: IMPL√âMENT√âE")
    else:
        print("‚ùå Correction d'erreur: MANQUANTE")
    
    # Conclusion
    print("\n" + "=" * 60)
    if all([fichiers_ok, script_ok, build_ok, dist_ok, correction_ok]):
        print("üéâ TOUT EST CORRECT !")
        print("üí° L'erreur 'list index out of range' est corrig√©e")
        print("üöÄ Vous pouvez reconstruire l'ex√©cutable avec:")
        print("   python build_portable_fixed.py")
        print("   ou")
        print("   build_portable_fixed.bat")
    else:
        print("‚ùå PROBL√àMES D√âTECT√âS")
        print("üîß Corrigez les erreurs avant de continuer")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
